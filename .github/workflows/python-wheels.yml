name: Build Python Wheels

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to build"
        required: true
        default: "v0.5.3"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Build wheels for multiple platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install maturin (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install maturin[patchelf]==1.4.0

      - name: Install maturin (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          pip install maturin==1.4.0

      - name: Build wheels
        run: maturin build --release --features python --out dist

      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import supabase_lib_rs; print('✅ Import successful')"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin==1.4.0

      - name: Build source distribution
        run: maturin sdist --out dist

      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Test wheels on multiple Python versions
  test-wheels:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    needs: build-wheels
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-ubuntu-latest
          path: dist/

      - name: Install wheel
        run: |
          pip install --upgrade pip
          pip install dist/*.whl
          pip install pytest pytest-asyncio

      - name: Run basic tests
        run: |
          python -c "
          import supabase_lib_rs as sb
          print(f'✅ Module imported: {sb.__version__}')
          client = sb.Client('http://localhost:54321', 'test-key')
          print('✅ Client created successfully')
          print(f'✅ Auth interface: {hasattr(client, \"auth\")}')
          print(f'✅ Database interface: {hasattr(client, \"database\")}')
          print(f'✅ Storage interface: {hasattr(client, \"storage\")}')
          print(f'✅ Functions interface: {hasattr(client, \"functions\")}')
          "

      - name: Run unit tests
        run: |
          if [ -f python/tests/test_client.py ]; then
            python -m pytest python/tests/test_client.py -v
          else
            echo "⚠️  No tests found, skipping"
          fi

  # Publish to PyPI on release
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, test-wheels]
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    permissions:
      id-token: write # For trusted publishing

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Flatten artifacts
        run: |
          mkdir -p final-dist
          find dist -name '*.whl' -exec cp {} final-dist/ \;
          find dist -name '*.tar.gz' -exec cp {} final-dist/ \;
          ls -la final-dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: final-dist/
          verbose: true
