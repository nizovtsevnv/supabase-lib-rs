name: Manual Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to publish (leave empty to use current pyproject.toml version)"
        required: false
        type: string
      dry_run:
        description: "Run dry-run only (don't actually publish)"
        required: false
        type: boolean
        default: false

jobs:
  manual-publish-pypi:
    name: Manual Publish to PyPI
    runs-on: ubuntu-latest
    permissions:
      id-token: write # For trusted publishing
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Update version if specified
        if: inputs.version != ''
        run: |
          echo "Updating version to ${{ inputs.version }}"
          sed -i 's/^version = ".*"/version = "${{ inputs.version }}"/' pyproject.toml
          sed -i 's/^version = ".*"/version = "${{ inputs.version }}"/' Cargo.toml
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add pyproject.toml Cargo.toml
          git commit -m "chore: bump version to ${{ inputs.version }}"

      - name: Install maturin
        run: |
          python -m pip install --upgrade pip
          pip install maturin[patchelf]==1.4.0

      - name: Run quality checks
        run: |
          echo "🔍 Running format check..."
          cargo fmt --all -- --check
          
          echo "🔍 Running clippy..."
          cargo clippy --all-targets --all-features -- -D warnings
          
          echo "🔍 Building package..."
          cargo build --release --features python
          
          echo "🔍 Running tests..."
          cargo test --all-features --workspace

      - name: Build wheels and source distribution
        run: |
          echo "🏗️ Building wheels..."
          maturin build --release --features python --out dist
          
          echo "🏗️ Building source distribution..."
          maturin sdist --out dist
          
          echo "📦 Built packages:"
          ls -la dist/

      - name: Test wheel installation
        run: |
          echo "🧪 Testing wheel installation..."
          pip install dist/*.whl
          python -c "
          import supabase_lib_rs as sb
          print(f'✅ Module imported: {sb.__version__}')
          client = sb.Client('http://localhost:54321', 'test-key')
          print('✅ Client created successfully')
          print(f'✅ Auth interface: {hasattr(client, \"auth\")}')
          print(f'✅ Database interface: {hasattr(client, \"database\")}')
          print(f'✅ Storage interface: {hasattr(client, \"storage\")}')
          print(f'✅ Functions interface: {hasattr(client, \"functions\")}')
          "

      - name: Dry run publish (TestPyPI)
        if: inputs.dry_run == true
        run: |
          echo "🏃 Running publish dry-run to TestPyPI..."
          python -m pip install twine
          python -m twine upload --repository testpypi --verbose dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

      - name: Actual publish to PyPI
        if: inputs.dry_run == false
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true

      - name: Create git tag if version was updated
        if: inputs.version != '' && inputs.dry_run == false
        run: |
          git tag "v${{ inputs.version }}"
          git push origin "v${{ inputs.version }}"

      - name: Summary
        run: |
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            echo "✅ Dry run completed successfully! Package uploaded to TestPyPI."
            echo "🔗 Check: https://test.pypi.org/project/supabase-lib-rs/"
          else
            echo "✅ Package published successfully to PyPI!"
            if [ "${{ inputs.version }}" != "" ]; then
              echo "📦 Version: ${{ inputs.version }}"
              echo "🏷️  Git tag: v${{ inputs.version }}"
            else
              echo "📦 Version: $(grep '^version =' pyproject.toml | cut -d'"' -f2)"
            fi
            echo "🔗 PyPI: https://pypi.org/project/supabase-lib-rs/"
          fi 