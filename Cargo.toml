[package]
name = "supabase-lib-rs"
version = "0.5.3"
description = "A comprehensive, production-ready Rust client library for Supabase with full cross-platform support (native + WASM)"
authors = ["Nick Nizovtsev <nizovtsevnv@users.noreply.github.com>"]
license = "MIT"
edition = "2021"
repository = "https://github.com/nizovtsevnv/supabase-lib-rs"
homepage = "https://github.com/nizovtsevnv/supabase-lib-rs"
documentation = "https://docs.rs/supabase-lib-rs"
readme = "README.md"
keywords = ["supabase", "database", "auth", "storage", "realtime"]
categories = ["api-bindings", "database", "web-programming", "wasm", "authentication"]
exclude = [
    "tests/",
    "examples/",
    "docs/",
    "scripts/",
    "volumes/",
    "docker-compose.yml",
    ".env*",
    "justfile",
    "flake.nix",
    "flake.lock",
    "deny.toml"
]

[badges]
docsrs = { repository = "https://docs.rs/supabase-lib-rs" }

[lib]
name = "supabase"
# Поддержка разных типов библиотек:
# - lib: обычная Rust библиотека (crates.io)
# - staticlib: статическая C-совместимая библиотека (.a/.lib)
# - cdylib: динамическая C-совместимая библиотека (.so/.dylib/.dll)
crate-type = ["lib", "staticlib", "cdylib"]

[package.metadata.docs.rs]
# Enable all features to build comprehensive docs
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[dependencies]
# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Time handling
chrono = { version = "0.4", features = ["serde"] }

# URL handling
url = "2.4"

# UUID support (always available)
uuid = { version = "1.6", features = ["v4", "serde"] }

# JWT handling (optional for auth feature)
jsonwebtoken = { version = "9.2", optional = true }

# Base64 encoding
base64 = "0.21"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = "0.3.20"

# Utilities
bytes = "1.5"
futures-util = { version = "0.3", features = ["sink"], optional = true }
async-trait = { version = "0.1", optional = true }
urlencoding = "2.1.3"
web-sys = { version = "0.3", features = ["Window", "Navigator", "Storage"], optional = true }
# MFA and TOTP support
totp-rs = "5.6"
base32 = "0.5"
qrcode = "0.14"
image = "0.25.7"
# International phone numbers
phonenumber = "0.3"
# Enhanced storage and caching
dirs = "5.0"

# Session management and storage
serde_with = { version = "3.14", optional = true }
indexmap = { version = "2.6", optional = true }
parking_lot = { version = "0.12", optional = true }

# Cross-platform storage dependencies moved to WASM section below

# WebAuthn support
webauthn-rs-proto = { version = "0.5", optional = true }

# Time utilities
time = { version = "0.3", optional = true, features = ["serde", "formatting"] }

# Native dependencies (non-WASM)
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
# HTTP client
reqwest = { version = "0.12", features = [
  "json",
  "rustls-tls",
  "multipart",
], default-features = false }

# Async runtime (optional for realtime)
tokio = { version = "1.0", features = ["full"], optional = true }
tokio-tungstenite = { version = "0.21", features = ["rustls-tls-native-roots"], optional = true }

# Native-specific storage and crypto
aes-gcm = { version = "0.10", optional = true }
argon2 = { version = "0.5", optional = true }
hex = { version = "0.4", optional = true }
rand = { version = "0.8", optional = true }
keyring = { version = "3", optional = true }

# Additional native dependencies for session management
hostname = { version = "0.4", optional = true }
mac_address = { version = "1.1", optional = true }
num_cpus = { version = "1.0", optional = true }
futures = { version = "0.3", optional = true }
tokio-stream = { version = "0.1.17", features = ["io-util"], optional = true }
tokio-util = { version = "0.7.16", features = ["io"], optional = true }


# WASM dependencies
[target.'cfg(target_arch = "wasm32")'.dependencies]
# HTTP client for WASM
reqwest = { version = "0.12", features = ["json"], default-features = false }

# WASM-specific UUID features
uuid = { version = "1.6", features = ["v4", "serde", "js"] }

# Getrandom for WASM
getrandom = { version = "0.2", features = ["js"] }

# WASM runtime (optional for wasm feature)
wasm-bindgen = { version = "0.2", optional = true }
wasm-bindgen-futures = { version = "0.4", optional = true }
web-sys = { version = "0.3", features = [
    "console", "WebSocket", "MessageEvent", "CloseEvent", "ErrorEvent",
    "Window", "Navigator", "Storage", "Event", "EventTarget",
    "BroadcastChannel", "StorageEvent", "Document",
    "Location", "History", "Crypto", "Screen", "Performance"
], optional = true }
js-sys = { version = "0.3", optional = true }

# WASM-specific session storage
gloo-storage = { version = "0.3", optional = true }
gloo-timers = { version = "0.3", features = ["futures"], optional = true }

[dev-dependencies]
tokio = { version = "1.0", features = ["full"] }
tracing-subscriber = "0.3.20"
dioxus = "0.6"
dioxus-web = "0.6"
wasm-bindgen = "0.2"
wasm-bindgen-futures = "0.4"
web-sys = { version = "0.3", features = ["console"] }
uuid = { version = "1.0", features = ["v4"] }
chrono = "0.4"

# Features for conditional compilation
[features]
default = ["auth", "database", "storage", "functions", "native", "session-management", "performance"]

# Core features
auth = ["jsonwebtoken"]
database = []
storage = []
functions = []
realtime = ["tokio-tungstenite", "futures-util", "async-trait"]
performance = ["tokio", "tokio-stream", "tokio-util"]

# Platform features
native = ["tokio"]
wasm = [
    "wasm-bindgen",
    "wasm-bindgen-futures",
    "web-sys/console",
    "web-sys/Window",
    "web-sys/WebSocket",
    "web-sys/MessageEvent",
    "web-sys/CloseEvent",
    "web-sys/ErrorEvent",
    "js-sys",
    "gloo-storage",
    "gloo-timers"
]

# v0.4.0 Session Management features
session-management = ["serde_with", "indexmap", "parking_lot", "hostname", "mac_address", "num_cpus", "futures", "async-trait"]
session-encryption = ["aes-gcm", "argon2", "rand", "keyring", "hex"]
webauthn = ["webauthn-rs-proto"]
session-monitoring = ["time"]
security-headers = []

# All features for testing
all = ["auth", "database", "storage", "functions", "realtime", "native", "wasm",
       "session-management", "session-encryption", "webauthn", "session-monitoring", "security-headers"]
# FFI features
ffi = ["auth", "database", "storage", "functions", "native"]
python = ["pyo3", "ffi"]
web-sys = ["dep:web-sys"]

[[example]]
name = "basic_usage"
path = "examples/basic_usage.rs"

[[example]]
name = "auth_example"
path = "examples/auth_example.rs"

[[example]]
name = "database_example"
path = "examples/database_example.rs"

[[example]]
name = "storage_example"
path = "examples/storage_example.rs"

[[example]]
name = "realtime_example"
path = "examples/realtime_example.rs"

[[example]]
name = "wasm_example"
path = "examples/wasm_example.rs"

[[example]]
name = "session_management_example"
path = "examples/session_management_example.rs"

[[example]]
name = "dioxus_example"
path = "examples/dioxus_example.rs"

[[example]]
name = "functions_example"
path = "examples/functions_example.rs"

[[example]]
name = "storage_advanced_example"
path = "examples/storage_advanced_example.rs"

[[example]]
name = "functions_performance_example"
path = "examples/functions_performance_example.rs"

# Python bindings support (enabled for v0.5.1)
[dependencies.pyo3]
version = "0.24.1"  # Updated to fix RUSTSEC-2025-0020
optional = true
features = ["extension-module", "abi3-py38"]
